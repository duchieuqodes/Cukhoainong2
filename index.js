const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const cron = require('node-cron'); // Th∆∞ vi·ªán ƒë·ªÉ thi·∫øt l·∫≠p cron jobs
const keep_alive = require('./keep_alive.js')

// K·∫øt n·ªëi t·ªõi MongoDB
mongoose.connect(
  'mongodb+srv://duchieufaryoung0:80E9gUahdOXmGKuy@cluster0.6nlv1cv.mongodb.net/telegram_bot_db?retryWrites=true&w=majority',
  { useNewUrlParser: true, useUnifiedTopology: true }
);
const db = mongoose.connection;

// ƒê·ªãnh nghƒ©a schema cho b·∫£ng c√¥ng
const BangCongSchema = new mongoose.Schema({
  userId: Number,
  groupId: Number,
  date: Date,
  ten: String,
  quay: Number,
  keo: Number,
  tinh_tien: Number,
});

// T·∫°o model t·ª´ schema
const BangCong2 = mongoose.model('BangCong2', BangCongSchema);

const token = '7150645082:AAGUNk7BrBPYJqv085nINEGx7p5tCE9WcK0';
const bot = new TelegramBot(token, { polling: true });

// Chu·ªói c·∫•mm
const bannedStringsRegex = /(ca\s?1|ca1|ca\s?2|Ca\s?2|Ca\s?1|Ca1|Ca\s?2|Ca2|C1|C2|c\s?1|c\s?2|C\s?1|C\s?2)\s*/gi;

// Thi·∫øt l·∫≠p cron job ƒë·ªÉ x√≥a d·ªØ li·ªáu b·∫£ng c√¥ng c·ªßa ng√†y h√¥m tr∆∞·ªõc
cron.schedule('0 0 * * *', async () => {
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);
  const formattedYesterday = new Date(yesterday.toLocaleDateString());

  try {
    const result = await BangCong2.deleteMany({ date: formattedYesterday });
    console.log(`ƒê√£ x√≥a ${result.deletedCount} b·∫£ng c√¥ng c·ªßa ng√†y ${formattedYesterday.toLocaleDateString()}`);
  } catch (error) {
    console.error("L·ªói khi x√≥a d·ªØ li·ªáu t·ª´ MongoDB:", error);
  }
});

            
// T√¨m c√°c s·ªë theo sau b·ªüi k√Ω t·ª± ho·∫∑c t·ª´ kh√≥a x√°c ƒë·ªãnh h√†nh vi
const regex = /\d+(q|Q|c|C|qu·∫©y|c·ªông|acc)/gi;


bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  // Ch·ªâ ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i l√† nh√≥m c√≥ ID
  if (chatId !== -1002103270166) {
    // Ki·ªÉm tra n·∫øu tin nh·∫Øn ch·ª©a chu·ªói c·∫•m
    // Ki·ªÉm tra c·∫£ vƒÉn b·∫£n v√† ch√∫ th√≠ch
  const messageContent = msg.text || msg.caption;
  if (messageContent) {
    // Ch·ªâ th·ª±c hi·ªán ki·ªÉm tra b·∫£ng c√¥ng n·∫øu tin nh·∫Øn ch·ª©a chu·ªói c·∫•m
    if (regex.test(messageContent)) {
    const matches = messageContent.match(regex);
      const userId = msg.from.id;
      const groupId = chatId;
      
    
      // T√¨m t·∫•t c·∫£ s·ªë v√† k√Ω t·ª± sau s·ªë
      // T√¨m t·∫•t c·∫£ s·ªë theo sau b·ªüi q, c, Q, C, qu·∫©y, c·ªông, ho·∫∑c acc
      
      let quay = 0;
      let keo = 0;

      if (matches) {
        matches.forEach((match) => {
          const number = parseInt(match); // L·∫•y s·ªë
          const suffix = match.slice(number.toString().length); // L·∫•y ch·ªØ c√°i ho·∫∑c t·ª´ theo sau s·ªë

          if (suffix.toLowerCase() === 'q' || suffix.toLowerCase() === 'p') {
            quay += number; // N·∫øu sau s·ªë l√† "q" ho·∫∑c "Q", th√™m v√†o "quay"
          } else if (suffix.toLowerCase() === 'c' || suffix === 'acc') {
            keo += number; // N·∫øu sau s·ªë l√† "c", "C", ho·∫∑c "acc", th√™m v√†o "keo"
          } else if (suffix === 'qu·∫©y') {
            quay += number; // N·∫øu sau s·ªë l√† "qu·∫©y", th√™m v√†o "quay"
          } else if (suffix === 'c·ªông') {
            keo += number; // N·∫øu sau s·ªë l√† "c·ªông", th√™m v√†o "keo"
          }
        });
      }

      bot.sendMessage(chatId, 'B√†i n·ªôp ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n ƒëang ch·ªù ki·ªÉm tra ‚ù§ü•≥', { reply_to_message_id: msg.message_id }).then(async () => {
        const currentDate = new Date().toLocaleDateString();
        const firstName = msg.from.first_name;
        const lastName = msg.from.last_name;
        const fullName = lastName ? `${firstName} ${lastName}` : firstName;

        let bangCong = await BangCong2.findOne({ userId, groupId, date: currentDate });

        if (!bangCong) {
          bangCong = await BangCong2.create({
            userId,
            groupId,
            date: currentDate,
            ten: fullName,
            quay,
            keo,
            tinh_tien: quay * 500 + keo * 1000,
          });
        } else {
          bangCong.quay += quay;
          bangCong.keo += keo;
          bangCong.tinh_tien += quay * 500 + keo * 1000;

          await bangCong.save();
        }
      });
    
  }
  }
  }
});
                                             
          
// B·∫£ng tra c·ª©u t√™n nh√≥m d·ª±a tr√™n ID nh√≥m
const groupNames = {
  "-1002039100507": "C·ªòNG ƒê·ªíNG N·∫ÆM B·∫ÆT C∆† H·ªòI",
  "-1002004082575": "KH√îNG NG·ª™NG PH√ÅT TRI·ªÇN",
  "-1002123430691": "D·∫™N L·ªêI TH√ÄNH C√îNG",
  "-1002143712364": "CURRENCY SHINING STAR GROUP",
  "-1002128975957": "C·ªòNG ƒê·ªíNG KH·ªûI NGHI·ªÜP",
  "-1002129896837": "KH√îNG NG·ª™NG ƒê·ªîI M·ªöI",
};

// X·ª≠ l√Ω l·ªánh /bc ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng c√¥ng cho t·∫•t c·∫£ c√°c nh√≥m
bot.onText(/\/bc/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const currentDate = new Date().toLocaleDateString(); // Ng√†y hi·ªán t·∫°i
    const bangCongs = await BangCong2.find({ date: currentDate }); // L·∫•y b·∫£ng c√¥ng cho ng√†y hi·ªán t·∫°i
    
    if (bangCongs.length === 0) {
      bot.sendMessage(chatId, "Kh√¥ng c√≥ b·∫£ng c√¥ng n√†o cho ng√†y h√¥m nay.");
      return;
    }

    // T·∫°o b·∫£ng c√¥ng ph√¢n lo·∫°i theo ID nh√≥m
    const groupedByGroupId = {};
    bangCongs.forEach((bangCong) => {
      const groupId = bangCong.groupId ? bangCong.groupId.toString() : ''; // Ki·ªÉm tra n·∫øu groupId kh√¥ng undefined
      if (!groupedByGroupId[groupId]) {
        groupedByGroupId[groupId] = [];
      }
      groupedByGroupId[groupId].push(bangCong);
    });

    let response = '';

    // T·∫°o b·∫£ng c√¥ng cho m·ªói nh√≥m
    for (const groupId in groupedByGroupId) {
      if (!groupId) {
        continue; // B·ªè qua n·∫øu groupId kh√¥ng h·ª£p l·ªá
      }

      const groupData = groupedByGroupId[groupId];
      const groupName = groupNames[groupId] || `Nh√≥m ${groupId}`; // L·∫•y t√™n nh√≥m t·ª´ b·∫£ng tra c·ª©u

      response += `B·∫£ng c√¥ng nh√≥m ${groupName}:\n\n`;
      
      let totalGroupMoney = 0; // Bi·∫øn ƒë·ªÉ t√≠nh t·ªïng s·ªë ti·ªÅn c·ªßa nh√≥m

      groupData.forEach((bangCong) => {
        if (bangCong.tinh_tien !== undefined) { // Ki·ªÉm tra tr∆∞·ªõc khi truy c·∫≠p thu·ªôc t√≠nh
          const formattedTien = bangCong.tinh_tien.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
          response += `${bangCong.ten}\t\t${bangCong.quay}q +\t${bangCong.keo}c\t${formattedTien}vnƒë\n`;
          totalGroupMoney += bangCong.tinh_tien; // T√≠nh t·ªïng ti·ªÅn
        }
      });

      const formattedTotal = totalGroupMoney.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
      response += `T·ªïng ti·ªÅn: ${formattedTotal}vnƒë\n\n`; // Hi·ªÉn th·ªã t·ªïng ti·ªÅn c·ªßa nh√≥m
    }

    bot.sendMessage(chatId, response.trim());
  } catch (error) {
    console.error('L·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ MongoDB:', error);
    bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu.');
  }
});

   

bot.onText(/\/tong/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const currentDate = new Date(); // Ng√†y hi·ªán t·∫°i

    // Truy v·∫•n ƒë·ªÉ t·ªïng h·ª£p b·∫£ng c√¥ng c·ªßa c√°c th√†nh vi√™n trong ng√†y hi·ªán t·∫°i
    const aggregatedData = await BangCong2.aggregate([
      {
        $match: { date: new Date(currentDate.toLocaleDateString()) }, // L·ªçc theo ng√†y hi·ªán t·∫°i
      },
      {
        $group: {
          _id: {
            userId: "$userId",
            ten: "$ten",
          },
          totalQuay: { $sum: "$quay" },
          totalKeo: { $sum: "$keo" },
          totalTinhTien: { $sum: "$tinh_tien" },
        },
      },
      {
        $sort: { totalTinhTien: -1 }, // S·∫Øp x·∫øp theo t·ªïng ti·ªÅn gi·∫£m d·∫ßn
      },
    ]);

    if (aggregatedData.length === 0) {
      bot.sendMessage(chatId, "Kh√¥ng c√≥ b·∫£ng c√¥ng n√†o cho ng√†y h√¥m nay.");
      return;
    }

    let response = "B·∫£ng c√¥ng t·ªïng h·ª£p cho ng√†y h√¥m nay:\n\n";
    response += "H·ªå T√äNüë©‚Äçüé§\t\tQU·∫®YüíÉ\tC·ªòNG‚ûï\tT·ªîNG TI·ªÄNüí∞\n";

    aggregatedData.forEach((data) => {
      const formattedTotal = data.totalTinhTien.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
      response += `${data._id.ten}\t\t${data.totalQuay}q +\t${data.totalKeo}c\t${formattedTotal}vnƒë\n`;
    });

    bot.sendMessage(chatId, response);
  } catch (error) {
    console.error("L·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ MongoDB:", error);
    bot.sendMessage(chatId, "ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu.");
  }
});

// L·ªánh /reset ƒë·ªÉ x√≥a b·∫£ng c√¥ng c·ªßa nh·ªØng ng√†y tr∆∞·ªõc
bot.onText(/\/reset/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    // Ng√†y hi·ªán t·∫°i
    const currentDate = new Date().toLocaleDateString();
    
    // X√≥a t·∫•t c·∫£ b·∫£ng c√¥ng c√≥ ng√†y tr∆∞·ªõc ng√†y hi·ªán t·∫°i
    const result = await BangCong2.deleteMany({
      date: { $lt: currentDate },
    });

    bot.sendMessage(chatId, `ƒê√£ x√≥a ${result.deletedCount} b·∫£ng c√¥ng c·ªßa nh·ªØng ng√†y tr∆∞·ªõc.`);
  } catch (error) {
    console.error('L·ªói khi x√≥a b·∫£ng c√¥ng:', error);
    bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi x√≥a b·∫£ng c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.');
  }
});
